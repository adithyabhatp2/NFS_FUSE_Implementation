/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NfsRpc_TYPES_H
#define NfsRpc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class thrift_timespec;

class thrift_fuse_file_info;

class thrift_stat;

class thrift_statvfs;

class thrift_getattr_reply;

class thrift_read_reply;

class thrift_statfs_reply;

class thrift_open_reply;

class thrift_readlink_reply;

class thrift_fsync_reply;

class thrift_dir_entry;

class thrift_readdir_reply;

typedef struct _thrift_timespec__isset {
  _thrift_timespec__isset() : tv_sec(false), tv_nsec(false) {}
  bool tv_sec :1;
  bool tv_nsec :1;
} _thrift_timespec__isset;

class thrift_timespec {
 public:

  thrift_timespec(const thrift_timespec&);
  thrift_timespec& operator=(const thrift_timespec&);
  thrift_timespec() : tv_sec(0), tv_nsec(0) {
  }

  virtual ~thrift_timespec() throw();
  int64_t tv_sec;
  int64_t tv_nsec;

  _thrift_timespec__isset __isset;

  void __set_tv_sec(const int64_t val);

  void __set_tv_nsec(const int64_t val);

  bool operator == (const thrift_timespec & rhs) const
  {
    if (!(tv_sec == rhs.tv_sec))
      return false;
    if (!(tv_nsec == rhs.tv_nsec))
      return false;
    return true;
  }
  bool operator != (const thrift_timespec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_timespec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_timespec &a, thrift_timespec &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_timespec& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_fuse_file_info__isset {
  _thrift_fuse_file_info__isset() : flags(false), fh_old(false), writepage(false), direct_io(false), keep_cache(false), flush(false), nonseekable(false), flock_release(false), padding(false), fh(false), lock_owner(false) {}
  bool flags :1;
  bool fh_old :1;
  bool writepage :1;
  bool direct_io :1;
  bool keep_cache :1;
  bool flush :1;
  bool nonseekable :1;
  bool flock_release :1;
  bool padding :1;
  bool fh :1;
  bool lock_owner :1;
} _thrift_fuse_file_info__isset;

class thrift_fuse_file_info {
 public:

  thrift_fuse_file_info(const thrift_fuse_file_info&);
  thrift_fuse_file_info& operator=(const thrift_fuse_file_info&);
  thrift_fuse_file_info() : flags(0), fh_old(0), writepage(0), direct_io(0), keep_cache(0), flush(0), nonseekable(0), flock_release(0), padding(0), fh(0), lock_owner(0) {
  }

  virtual ~thrift_fuse_file_info() throw();
  int32_t flags;
  int64_t fh_old;
  int32_t writepage;
  int32_t direct_io;
  int32_t keep_cache;
  int32_t flush;
  int32_t nonseekable;
  int32_t flock_release;
  int32_t padding;
  int64_t fh;
  int64_t lock_owner;

  _thrift_fuse_file_info__isset __isset;

  void __set_flags(const int32_t val);

  void __set_fh_old(const int64_t val);

  void __set_writepage(const int32_t val);

  void __set_direct_io(const int32_t val);

  void __set_keep_cache(const int32_t val);

  void __set_flush(const int32_t val);

  void __set_nonseekable(const int32_t val);

  void __set_flock_release(const int32_t val);

  void __set_padding(const int32_t val);

  void __set_fh(const int64_t val);

  void __set_lock_owner(const int64_t val);

  bool operator == (const thrift_fuse_file_info & rhs) const
  {
    if (!(flags == rhs.flags))
      return false;
    if (!(fh_old == rhs.fh_old))
      return false;
    if (!(writepage == rhs.writepage))
      return false;
    if (!(direct_io == rhs.direct_io))
      return false;
    if (!(keep_cache == rhs.keep_cache))
      return false;
    if (!(flush == rhs.flush))
      return false;
    if (!(nonseekable == rhs.nonseekable))
      return false;
    if (!(flock_release == rhs.flock_release))
      return false;
    if (!(padding == rhs.padding))
      return false;
    if (!(fh == rhs.fh))
      return false;
    if (!(lock_owner == rhs.lock_owner))
      return false;
    return true;
  }
  bool operator != (const thrift_fuse_file_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_fuse_file_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_fuse_file_info &a, thrift_fuse_file_info &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_fuse_file_info& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_stat__isset {
  _thrift_stat__isset() : st_dev(false), st_ino(false), st_mode(false), st_nlink(false), st_uid(false), st_gid(false), __pad0(false), st_size(false), st_blksize(false), st_blocks(false), st_atim(false), st_mtim(false), st_ctim(false), __glibc_reserved0(false), __glibc_reserved1(false), __glibc_reserved2(false), st_rdev(false) {}
  bool st_dev :1;
  bool st_ino :1;
  bool st_mode :1;
  bool st_nlink :1;
  bool st_uid :1;
  bool st_gid :1;
  bool __pad0 :1;
  bool st_size :1;
  bool st_blksize :1;
  bool st_blocks :1;
  bool st_atim :1;
  bool st_mtim :1;
  bool st_ctim :1;
  bool __glibc_reserved0 :1;
  bool __glibc_reserved1 :1;
  bool __glibc_reserved2 :1;
  bool st_rdev :1;
} _thrift_stat__isset;

class thrift_stat {
 public:

  thrift_stat(const thrift_stat&);
  thrift_stat& operator=(const thrift_stat&);
  thrift_stat() : st_dev(0), st_ino(0), st_mode(0), st_nlink(0), st_uid(0), st_gid(0), __pad0(0), st_size(0), st_blksize(0), st_blocks(0), __glibc_reserved0(0), __glibc_reserved1(0), __glibc_reserved2(0), st_rdev(0) {
  }

  virtual ~thrift_stat() throw();
  int64_t st_dev;
  int64_t st_ino;
  int32_t st_mode;
  int64_t st_nlink;
  int32_t st_uid;
  int32_t st_gid;
  int32_t __pad0;
  int64_t st_size;
  int64_t st_blksize;
  int64_t st_blocks;
  thrift_timespec st_atim;
  thrift_timespec st_mtim;
  thrift_timespec st_ctim;
  int64_t __glibc_reserved0;
  int64_t __glibc_reserved1;
  int64_t __glibc_reserved2;
  int64_t st_rdev;

  _thrift_stat__isset __isset;

  void __set_st_dev(const int64_t val);

  void __set_st_ino(const int64_t val);

  void __set_st_mode(const int32_t val);

  void __set_st_nlink(const int64_t val);

  void __set_st_uid(const int32_t val);

  void __set_st_gid(const int32_t val);

  void __set___pad0(const int32_t val);

  void __set_st_size(const int64_t val);

  void __set_st_blksize(const int64_t val);

  void __set_st_blocks(const int64_t val);

  void __set_st_atim(const thrift_timespec& val);

  void __set_st_mtim(const thrift_timespec& val);

  void __set_st_ctim(const thrift_timespec& val);

  void __set___glibc_reserved0(const int64_t val);

  void __set___glibc_reserved1(const int64_t val);

  void __set___glibc_reserved2(const int64_t val);

  void __set_st_rdev(const int64_t val);

  bool operator == (const thrift_stat & rhs) const
  {
    if (!(st_dev == rhs.st_dev))
      return false;
    if (!(st_ino == rhs.st_ino))
      return false;
    if (!(st_mode == rhs.st_mode))
      return false;
    if (!(st_nlink == rhs.st_nlink))
      return false;
    if (!(st_uid == rhs.st_uid))
      return false;
    if (!(st_gid == rhs.st_gid))
      return false;
    if (!(__pad0 == rhs.__pad0))
      return false;
    if (!(st_size == rhs.st_size))
      return false;
    if (!(st_blksize == rhs.st_blksize))
      return false;
    if (!(st_blocks == rhs.st_blocks))
      return false;
    if (!(st_atim == rhs.st_atim))
      return false;
    if (!(st_mtim == rhs.st_mtim))
      return false;
    if (!(st_ctim == rhs.st_ctim))
      return false;
    if (!(__glibc_reserved0 == rhs.__glibc_reserved0))
      return false;
    if (!(__glibc_reserved1 == rhs.__glibc_reserved1))
      return false;
    if (!(__glibc_reserved2 == rhs.__glibc_reserved2))
      return false;
    if (!(st_rdev == rhs.st_rdev))
      return false;
    return true;
  }
  bool operator != (const thrift_stat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_stat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_stat &a, thrift_stat &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_stat& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_statvfs__isset {
  _thrift_statvfs__isset() : f_bsize(false), f_frsize(false), f_blocks(false), f_bfree(false), f_bavail(false), f_files(false), f_ffree(false), f_favail(false), f_fsid(false), f_flag(false), f_namemax(false), __f_spare0(false), __f_spare1(false), __f_spare2(false), __f_spare3(false), __f_spare4(false), __f_spare5(false) {}
  bool f_bsize :1;
  bool f_frsize :1;
  bool f_blocks :1;
  bool f_bfree :1;
  bool f_bavail :1;
  bool f_files :1;
  bool f_ffree :1;
  bool f_favail :1;
  bool f_fsid :1;
  bool f_flag :1;
  bool f_namemax :1;
  bool __f_spare0 :1;
  bool __f_spare1 :1;
  bool __f_spare2 :1;
  bool __f_spare3 :1;
  bool __f_spare4 :1;
  bool __f_spare5 :1;
} _thrift_statvfs__isset;

class thrift_statvfs {
 public:

  thrift_statvfs(const thrift_statvfs&);
  thrift_statvfs& operator=(const thrift_statvfs&);
  thrift_statvfs() : f_bsize(0), f_frsize(0), f_blocks(0), f_bfree(0), f_bavail(0), f_files(0), f_ffree(0), f_favail(0), f_fsid(0), f_flag(0), f_namemax(0), __f_spare0(0), __f_spare1(0), __f_spare2(0), __f_spare3(0), __f_spare4(0), __f_spare5(0) {
  }

  virtual ~thrift_statvfs() throw();
  int64_t f_bsize;
  int64_t f_frsize;
  int64_t f_blocks;
  int64_t f_bfree;
  int64_t f_bavail;
  int64_t f_files;
  int64_t f_ffree;
  int64_t f_favail;
  int64_t f_fsid;
  int64_t f_flag;
  int64_t f_namemax;
  int32_t __f_spare0;
  int32_t __f_spare1;
  int32_t __f_spare2;
  int32_t __f_spare3;
  int32_t __f_spare4;
  int32_t __f_spare5;

  _thrift_statvfs__isset __isset;

  void __set_f_bsize(const int64_t val);

  void __set_f_frsize(const int64_t val);

  void __set_f_blocks(const int64_t val);

  void __set_f_bfree(const int64_t val);

  void __set_f_bavail(const int64_t val);

  void __set_f_files(const int64_t val);

  void __set_f_ffree(const int64_t val);

  void __set_f_favail(const int64_t val);

  void __set_f_fsid(const int64_t val);

  void __set_f_flag(const int64_t val);

  void __set_f_namemax(const int64_t val);

  void __set___f_spare0(const int32_t val);

  void __set___f_spare1(const int32_t val);

  void __set___f_spare2(const int32_t val);

  void __set___f_spare3(const int32_t val);

  void __set___f_spare4(const int32_t val);

  void __set___f_spare5(const int32_t val);

  bool operator == (const thrift_statvfs & rhs) const
  {
    if (!(f_bsize == rhs.f_bsize))
      return false;
    if (!(f_frsize == rhs.f_frsize))
      return false;
    if (!(f_blocks == rhs.f_blocks))
      return false;
    if (!(f_bfree == rhs.f_bfree))
      return false;
    if (!(f_bavail == rhs.f_bavail))
      return false;
    if (!(f_files == rhs.f_files))
      return false;
    if (!(f_ffree == rhs.f_ffree))
      return false;
    if (!(f_favail == rhs.f_favail))
      return false;
    if (!(f_fsid == rhs.f_fsid))
      return false;
    if (!(f_flag == rhs.f_flag))
      return false;
    if (!(f_namemax == rhs.f_namemax))
      return false;
    if (!(__f_spare0 == rhs.__f_spare0))
      return false;
    if (!(__f_spare1 == rhs.__f_spare1))
      return false;
    if (!(__f_spare2 == rhs.__f_spare2))
      return false;
    if (!(__f_spare3 == rhs.__f_spare3))
      return false;
    if (!(__f_spare4 == rhs.__f_spare4))
      return false;
    if (!(__f_spare5 == rhs.__f_spare5))
      return false;
    return true;
  }
  bool operator != (const thrift_statvfs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_statvfs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_statvfs &a, thrift_statvfs &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_statvfs& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_getattr_reply__isset {
  _thrift_getattr_reply__isset() : retVal(false), tstbuf(false) {}
  bool retVal :1;
  bool tstbuf :1;
} _thrift_getattr_reply__isset;

class thrift_getattr_reply {
 public:

  thrift_getattr_reply(const thrift_getattr_reply&);
  thrift_getattr_reply& operator=(const thrift_getattr_reply&);
  thrift_getattr_reply() : retVal(0) {
  }

  virtual ~thrift_getattr_reply() throw();
  int32_t retVal;
  thrift_stat tstbuf;

  _thrift_getattr_reply__isset __isset;

  void __set_retVal(const int32_t val);

  void __set_tstbuf(const thrift_stat& val);

  bool operator == (const thrift_getattr_reply & rhs) const
  {
    if (!(retVal == rhs.retVal))
      return false;
    if (!(tstbuf == rhs.tstbuf))
      return false;
    return true;
  }
  bool operator != (const thrift_getattr_reply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_getattr_reply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_getattr_reply &a, thrift_getattr_reply &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_getattr_reply& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_read_reply__isset {
  _thrift_read_reply__isset() : retVal(false), tbuf(false) {}
  bool retVal :1;
  bool tbuf :1;
} _thrift_read_reply__isset;

class thrift_read_reply {
 public:

  thrift_read_reply(const thrift_read_reply&);
  thrift_read_reply& operator=(const thrift_read_reply&);
  thrift_read_reply() : retVal(0), tbuf() {
  }

  virtual ~thrift_read_reply() throw();
  int32_t retVal;
  std::string tbuf;

  _thrift_read_reply__isset __isset;

  void __set_retVal(const int32_t val);

  void __set_tbuf(const std::string& val);

  bool operator == (const thrift_read_reply & rhs) const
  {
    if (!(retVal == rhs.retVal))
      return false;
    if (!(tbuf == rhs.tbuf))
      return false;
    return true;
  }
  bool operator != (const thrift_read_reply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_read_reply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_read_reply &a, thrift_read_reply &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_read_reply& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_statfs_reply__isset {
  _thrift_statfs_reply__isset() : retVal(false), tstbuf(false) {}
  bool retVal :1;
  bool tstbuf :1;
} _thrift_statfs_reply__isset;

class thrift_statfs_reply {
 public:

  thrift_statfs_reply(const thrift_statfs_reply&);
  thrift_statfs_reply& operator=(const thrift_statfs_reply&);
  thrift_statfs_reply() : retVal(0) {
  }

  virtual ~thrift_statfs_reply() throw();
  int32_t retVal;
  thrift_statvfs tstbuf;

  _thrift_statfs_reply__isset __isset;

  void __set_retVal(const int32_t val);

  void __set_tstbuf(const thrift_statvfs& val);

  bool operator == (const thrift_statfs_reply & rhs) const
  {
    if (!(retVal == rhs.retVal))
      return false;
    if (!(tstbuf == rhs.tstbuf))
      return false;
    return true;
  }
  bool operator != (const thrift_statfs_reply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_statfs_reply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_statfs_reply &a, thrift_statfs_reply &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_statfs_reply& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_open_reply__isset {
  _thrift_open_reply__isset() : retVal(false), tfi(false) {}
  bool retVal :1;
  bool tfi :1;
} _thrift_open_reply__isset;

class thrift_open_reply {
 public:

  thrift_open_reply(const thrift_open_reply&);
  thrift_open_reply& operator=(const thrift_open_reply&);
  thrift_open_reply() : retVal(0) {
  }

  virtual ~thrift_open_reply() throw();
  int32_t retVal;
  thrift_fuse_file_info tfi;

  _thrift_open_reply__isset __isset;

  void __set_retVal(const int32_t val);

  void __set_tfi(const thrift_fuse_file_info& val);

  bool operator == (const thrift_open_reply & rhs) const
  {
    if (!(retVal == rhs.retVal))
      return false;
    if (!(tfi == rhs.tfi))
      return false;
    return true;
  }
  bool operator != (const thrift_open_reply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_open_reply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_open_reply &a, thrift_open_reply &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_open_reply& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_readlink_reply__isset {
  _thrift_readlink_reply__isset() : retVal(false), tbuf(false) {}
  bool retVal :1;
  bool tbuf :1;
} _thrift_readlink_reply__isset;

class thrift_readlink_reply {
 public:

  thrift_readlink_reply(const thrift_readlink_reply&);
  thrift_readlink_reply& operator=(const thrift_readlink_reply&);
  thrift_readlink_reply() : retVal(0), tbuf() {
  }

  virtual ~thrift_readlink_reply() throw();
  int32_t retVal;
  std::string tbuf;

  _thrift_readlink_reply__isset __isset;

  void __set_retVal(const int32_t val);

  void __set_tbuf(const std::string& val);

  bool operator == (const thrift_readlink_reply & rhs) const
  {
    if (!(retVal == rhs.retVal))
      return false;
    if (!(tbuf == rhs.tbuf))
      return false;
    return true;
  }
  bool operator != (const thrift_readlink_reply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_readlink_reply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_readlink_reply &a, thrift_readlink_reply &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_readlink_reply& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_fsync_reply__isset {
  _thrift_fsync_reply__isset() : retVal(false), isdatasync(false), tfi(false) {}
  bool retVal :1;
  bool isdatasync :1;
  bool tfi :1;
} _thrift_fsync_reply__isset;

class thrift_fsync_reply {
 public:

  thrift_fsync_reply(const thrift_fsync_reply&);
  thrift_fsync_reply& operator=(const thrift_fsync_reply&);
  thrift_fsync_reply() : retVal(0), isdatasync(0) {
  }

  virtual ~thrift_fsync_reply() throw();
  int32_t retVal;
  int32_t isdatasync;
  thrift_fuse_file_info tfi;

  _thrift_fsync_reply__isset __isset;

  void __set_retVal(const int32_t val);

  void __set_isdatasync(const int32_t val);

  void __set_tfi(const thrift_fuse_file_info& val);

  bool operator == (const thrift_fsync_reply & rhs) const
  {
    if (!(retVal == rhs.retVal))
      return false;
    if (!(isdatasync == rhs.isdatasync))
      return false;
    if (!(tfi == rhs.tfi))
      return false;
    return true;
  }
  bool operator != (const thrift_fsync_reply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_fsync_reply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_fsync_reply &a, thrift_fsync_reply &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_fsync_reply& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_dir_entry__isset {
  _thrift_dir_entry__isset() : d_ino(false), d_type(false), d_name(false) {}
  bool d_ino :1;
  bool d_type :1;
  bool d_name :1;
} _thrift_dir_entry__isset;

class thrift_dir_entry {
 public:

  thrift_dir_entry(const thrift_dir_entry&);
  thrift_dir_entry& operator=(const thrift_dir_entry&);
  thrift_dir_entry() : d_ino(0), d_type(0), d_name() {
  }

  virtual ~thrift_dir_entry() throw();
  int64_t d_ino;
  int64_t d_type;
  std::string d_name;

  _thrift_dir_entry__isset __isset;

  void __set_d_ino(const int64_t val);

  void __set_d_type(const int64_t val);

  void __set_d_name(const std::string& val);

  bool operator == (const thrift_dir_entry & rhs) const
  {
    if (!(d_ino == rhs.d_ino))
      return false;
    if (!(d_type == rhs.d_type))
      return false;
    if (!(d_name == rhs.d_name))
      return false;
    return true;
  }
  bool operator != (const thrift_dir_entry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_dir_entry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_dir_entry &a, thrift_dir_entry &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_dir_entry& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_readdir_reply__isset {
  _thrift_readdir_reply__isset() : retVal(false), dir_entries(false) {}
  bool retVal :1;
  bool dir_entries :1;
} _thrift_readdir_reply__isset;

class thrift_readdir_reply {
 public:

  thrift_readdir_reply(const thrift_readdir_reply&);
  thrift_readdir_reply& operator=(const thrift_readdir_reply&);
  thrift_readdir_reply() : retVal(0) {
  }

  virtual ~thrift_readdir_reply() throw();
  int32_t retVal;
  std::vector<thrift_dir_entry>  dir_entries;

  _thrift_readdir_reply__isset __isset;

  void __set_retVal(const int32_t val);

  void __set_dir_entries(const std::vector<thrift_dir_entry> & val);

  bool operator == (const thrift_readdir_reply & rhs) const
  {
    if (!(retVal == rhs.retVal))
      return false;
    if (!(dir_entries == rhs.dir_entries))
      return false;
    return true;
  }
  bool operator != (const thrift_readdir_reply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_readdir_reply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_readdir_reply &a, thrift_readdir_reply &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_readdir_reply& obj)
{
  obj.printTo(out);
  return out;
}



#endif
