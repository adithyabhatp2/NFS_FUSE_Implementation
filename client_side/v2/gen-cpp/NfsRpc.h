/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NfsRpc_H
#define NfsRpc_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "NfsRpc_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class NfsRpcIf {
 public:
  virtual ~NfsRpcIf() {}
  virtual int32_t xmp_open(const std::string& path, const thrift_fuse_file_info& fi) = 0;
  virtual int32_t xmp_access(const std::string& path, const int32_t mask) = 0;
  virtual int32_t xmp_mknod(const std::string& path, const int32_t mode, const int64_t rdev) = 0;
  virtual int32_t xmp_remove(const std::string& path) = 0;
  virtual int32_t xmp_getattr(const std::string& path, const thrift_stat& stbuf) = 0;
  virtual int32_t xmp_setattr(const std::string& path, const thrift_stat& stbuf) = 0;
  virtual int32_t xmp_read(const std::string& path, const std::string& buf, const int64_t size, const int64_t offset, const thrift_fuse_file_info& fi) = 0;
  virtual int32_t xmp_write(const std::string& path, const std::string& buf, const int64_t size, const int64_t offset, const thrift_fuse_file_info& fi) = 0;
  virtual int32_t xmp_rename(const std::string& fromName, const std::string& to) = 0;
  virtual int32_t xmp_mkdir(const std::string& path, const int32_t mode) = 0;
  virtual int32_t xmp_rmdir(const std::string& path) = 0;
  virtual int32_t xmp_statfs(const std::string& path, const thrift_statvfs& stbuf) = 0;
};

class NfsRpcIfFactory {
 public:
  typedef NfsRpcIf Handler;

  virtual ~NfsRpcIfFactory() {}

  virtual NfsRpcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(NfsRpcIf* /* handler */) = 0;
};

class NfsRpcIfSingletonFactory : virtual public NfsRpcIfFactory {
 public:
  NfsRpcIfSingletonFactory(const boost::shared_ptr<NfsRpcIf>& iface) : iface_(iface) {}
  virtual ~NfsRpcIfSingletonFactory() {}

  virtual NfsRpcIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(NfsRpcIf* /* handler */) {}

 protected:
  boost::shared_ptr<NfsRpcIf> iface_;
};

class NfsRpcNull : virtual public NfsRpcIf {
 public:
  virtual ~NfsRpcNull() {}
  int32_t xmp_open(const std::string& /* path */, const thrift_fuse_file_info& /* fi */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t xmp_access(const std::string& /* path */, const int32_t /* mask */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t xmp_mknod(const std::string& /* path */, const int32_t /* mode */, const int64_t /* rdev */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t xmp_remove(const std::string& /* path */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t xmp_getattr(const std::string& /* path */, const thrift_stat& /* stbuf */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t xmp_setattr(const std::string& /* path */, const thrift_stat& /* stbuf */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t xmp_read(const std::string& /* path */, const std::string& /* buf */, const int64_t /* size */, const int64_t /* offset */, const thrift_fuse_file_info& /* fi */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t xmp_write(const std::string& /* path */, const std::string& /* buf */, const int64_t /* size */, const int64_t /* offset */, const thrift_fuse_file_info& /* fi */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t xmp_rename(const std::string& /* fromName */, const std::string& /* to */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t xmp_mkdir(const std::string& /* path */, const int32_t /* mode */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t xmp_rmdir(const std::string& /* path */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t xmp_statfs(const std::string& /* path */, const thrift_statvfs& /* stbuf */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _NfsRpc_xmp_open_args__isset {
  _NfsRpc_xmp_open_args__isset() : path(false), fi(false) {}
  bool path :1;
  bool fi :1;
} _NfsRpc_xmp_open_args__isset;

class NfsRpc_xmp_open_args {
 public:

  NfsRpc_xmp_open_args(const NfsRpc_xmp_open_args&);
  NfsRpc_xmp_open_args& operator=(const NfsRpc_xmp_open_args&);
  NfsRpc_xmp_open_args() : path() {
  }

  virtual ~NfsRpc_xmp_open_args() throw();
  std::string path;
  thrift_fuse_file_info fi;

  _NfsRpc_xmp_open_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_fi(const thrift_fuse_file_info& val);

  bool operator == (const NfsRpc_xmp_open_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(fi == rhs.fi))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_open_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_open_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NfsRpc_xmp_open_pargs {
 public:


  virtual ~NfsRpc_xmp_open_pargs() throw();
  const std::string* path;
  const thrift_fuse_file_info* fi;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_open_result__isset {
  _NfsRpc_xmp_open_result__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_open_result__isset;

class NfsRpc_xmp_open_result {
 public:

  NfsRpc_xmp_open_result(const NfsRpc_xmp_open_result&);
  NfsRpc_xmp_open_result& operator=(const NfsRpc_xmp_open_result&);
  NfsRpc_xmp_open_result() : success(0) {
  }

  virtual ~NfsRpc_xmp_open_result() throw();
  int32_t success;

  _NfsRpc_xmp_open_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NfsRpc_xmp_open_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_open_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_open_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_open_presult__isset {
  _NfsRpc_xmp_open_presult__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_open_presult__isset;

class NfsRpc_xmp_open_presult {
 public:


  virtual ~NfsRpc_xmp_open_presult() throw();
  int32_t* success;

  _NfsRpc_xmp_open_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NfsRpc_xmp_access_args__isset {
  _NfsRpc_xmp_access_args__isset() : path(false), mask(false) {}
  bool path :1;
  bool mask :1;
} _NfsRpc_xmp_access_args__isset;

class NfsRpc_xmp_access_args {
 public:

  NfsRpc_xmp_access_args(const NfsRpc_xmp_access_args&);
  NfsRpc_xmp_access_args& operator=(const NfsRpc_xmp_access_args&);
  NfsRpc_xmp_access_args() : path(), mask(0) {
  }

  virtual ~NfsRpc_xmp_access_args() throw();
  std::string path;
  int32_t mask;

  _NfsRpc_xmp_access_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_mask(const int32_t val);

  bool operator == (const NfsRpc_xmp_access_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(mask == rhs.mask))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_access_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_access_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NfsRpc_xmp_access_pargs {
 public:


  virtual ~NfsRpc_xmp_access_pargs() throw();
  const std::string* path;
  const int32_t* mask;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_access_result__isset {
  _NfsRpc_xmp_access_result__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_access_result__isset;

class NfsRpc_xmp_access_result {
 public:

  NfsRpc_xmp_access_result(const NfsRpc_xmp_access_result&);
  NfsRpc_xmp_access_result& operator=(const NfsRpc_xmp_access_result&);
  NfsRpc_xmp_access_result() : success(0) {
  }

  virtual ~NfsRpc_xmp_access_result() throw();
  int32_t success;

  _NfsRpc_xmp_access_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NfsRpc_xmp_access_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_access_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_access_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_access_presult__isset {
  _NfsRpc_xmp_access_presult__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_access_presult__isset;

class NfsRpc_xmp_access_presult {
 public:


  virtual ~NfsRpc_xmp_access_presult() throw();
  int32_t* success;

  _NfsRpc_xmp_access_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NfsRpc_xmp_mknod_args__isset {
  _NfsRpc_xmp_mknod_args__isset() : path(false), mode(false), rdev(false) {}
  bool path :1;
  bool mode :1;
  bool rdev :1;
} _NfsRpc_xmp_mknod_args__isset;

class NfsRpc_xmp_mknod_args {
 public:

  NfsRpc_xmp_mknod_args(const NfsRpc_xmp_mknod_args&);
  NfsRpc_xmp_mknod_args& operator=(const NfsRpc_xmp_mknod_args&);
  NfsRpc_xmp_mknod_args() : path(), mode(0), rdev(0) {
  }

  virtual ~NfsRpc_xmp_mknod_args() throw();
  std::string path;
  int32_t mode;
  int64_t rdev;

  _NfsRpc_xmp_mknod_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_mode(const int32_t val);

  void __set_rdev(const int64_t val);

  bool operator == (const NfsRpc_xmp_mknod_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(rdev == rhs.rdev))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_mknod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_mknod_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NfsRpc_xmp_mknod_pargs {
 public:


  virtual ~NfsRpc_xmp_mknod_pargs() throw();
  const std::string* path;
  const int32_t* mode;
  const int64_t* rdev;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_mknod_result__isset {
  _NfsRpc_xmp_mknod_result__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_mknod_result__isset;

class NfsRpc_xmp_mknod_result {
 public:

  NfsRpc_xmp_mknod_result(const NfsRpc_xmp_mknod_result&);
  NfsRpc_xmp_mknod_result& operator=(const NfsRpc_xmp_mknod_result&);
  NfsRpc_xmp_mknod_result() : success(0) {
  }

  virtual ~NfsRpc_xmp_mknod_result() throw();
  int32_t success;

  _NfsRpc_xmp_mknod_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NfsRpc_xmp_mknod_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_mknod_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_mknod_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_mknod_presult__isset {
  _NfsRpc_xmp_mknod_presult__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_mknod_presult__isset;

class NfsRpc_xmp_mknod_presult {
 public:


  virtual ~NfsRpc_xmp_mknod_presult() throw();
  int32_t* success;

  _NfsRpc_xmp_mknod_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NfsRpc_xmp_remove_args__isset {
  _NfsRpc_xmp_remove_args__isset() : path(false) {}
  bool path :1;
} _NfsRpc_xmp_remove_args__isset;

class NfsRpc_xmp_remove_args {
 public:

  NfsRpc_xmp_remove_args(const NfsRpc_xmp_remove_args&);
  NfsRpc_xmp_remove_args& operator=(const NfsRpc_xmp_remove_args&);
  NfsRpc_xmp_remove_args() : path() {
  }

  virtual ~NfsRpc_xmp_remove_args() throw();
  std::string path;

  _NfsRpc_xmp_remove_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const NfsRpc_xmp_remove_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NfsRpc_xmp_remove_pargs {
 public:


  virtual ~NfsRpc_xmp_remove_pargs() throw();
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_remove_result__isset {
  _NfsRpc_xmp_remove_result__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_remove_result__isset;

class NfsRpc_xmp_remove_result {
 public:

  NfsRpc_xmp_remove_result(const NfsRpc_xmp_remove_result&);
  NfsRpc_xmp_remove_result& operator=(const NfsRpc_xmp_remove_result&);
  NfsRpc_xmp_remove_result() : success(0) {
  }

  virtual ~NfsRpc_xmp_remove_result() throw();
  int32_t success;

  _NfsRpc_xmp_remove_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NfsRpc_xmp_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_remove_presult__isset {
  _NfsRpc_xmp_remove_presult__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_remove_presult__isset;

class NfsRpc_xmp_remove_presult {
 public:


  virtual ~NfsRpc_xmp_remove_presult() throw();
  int32_t* success;

  _NfsRpc_xmp_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NfsRpc_xmp_getattr_args__isset {
  _NfsRpc_xmp_getattr_args__isset() : path(false), stbuf(false) {}
  bool path :1;
  bool stbuf :1;
} _NfsRpc_xmp_getattr_args__isset;

class NfsRpc_xmp_getattr_args {
 public:

  NfsRpc_xmp_getattr_args(const NfsRpc_xmp_getattr_args&);
  NfsRpc_xmp_getattr_args& operator=(const NfsRpc_xmp_getattr_args&);
  NfsRpc_xmp_getattr_args() : path() {
  }

  virtual ~NfsRpc_xmp_getattr_args() throw();
  std::string path;
  thrift_stat stbuf;

  _NfsRpc_xmp_getattr_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_stbuf(const thrift_stat& val);

  bool operator == (const NfsRpc_xmp_getattr_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(stbuf == rhs.stbuf))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_getattr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_getattr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NfsRpc_xmp_getattr_pargs {
 public:


  virtual ~NfsRpc_xmp_getattr_pargs() throw();
  const std::string* path;
  const thrift_stat* stbuf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_getattr_result__isset {
  _NfsRpc_xmp_getattr_result__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_getattr_result__isset;

class NfsRpc_xmp_getattr_result {
 public:

  NfsRpc_xmp_getattr_result(const NfsRpc_xmp_getattr_result&);
  NfsRpc_xmp_getattr_result& operator=(const NfsRpc_xmp_getattr_result&);
  NfsRpc_xmp_getattr_result() : success(0) {
  }

  virtual ~NfsRpc_xmp_getattr_result() throw();
  int32_t success;

  _NfsRpc_xmp_getattr_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NfsRpc_xmp_getattr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_getattr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_getattr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_getattr_presult__isset {
  _NfsRpc_xmp_getattr_presult__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_getattr_presult__isset;

class NfsRpc_xmp_getattr_presult {
 public:


  virtual ~NfsRpc_xmp_getattr_presult() throw();
  int32_t* success;

  _NfsRpc_xmp_getattr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NfsRpc_xmp_setattr_args__isset {
  _NfsRpc_xmp_setattr_args__isset() : path(false), stbuf(false) {}
  bool path :1;
  bool stbuf :1;
} _NfsRpc_xmp_setattr_args__isset;

class NfsRpc_xmp_setattr_args {
 public:

  NfsRpc_xmp_setattr_args(const NfsRpc_xmp_setattr_args&);
  NfsRpc_xmp_setattr_args& operator=(const NfsRpc_xmp_setattr_args&);
  NfsRpc_xmp_setattr_args() : path() {
  }

  virtual ~NfsRpc_xmp_setattr_args() throw();
  std::string path;
  thrift_stat stbuf;

  _NfsRpc_xmp_setattr_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_stbuf(const thrift_stat& val);

  bool operator == (const NfsRpc_xmp_setattr_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(stbuf == rhs.stbuf))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_setattr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_setattr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NfsRpc_xmp_setattr_pargs {
 public:


  virtual ~NfsRpc_xmp_setattr_pargs() throw();
  const std::string* path;
  const thrift_stat* stbuf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_setattr_result__isset {
  _NfsRpc_xmp_setattr_result__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_setattr_result__isset;

class NfsRpc_xmp_setattr_result {
 public:

  NfsRpc_xmp_setattr_result(const NfsRpc_xmp_setattr_result&);
  NfsRpc_xmp_setattr_result& operator=(const NfsRpc_xmp_setattr_result&);
  NfsRpc_xmp_setattr_result() : success(0) {
  }

  virtual ~NfsRpc_xmp_setattr_result() throw();
  int32_t success;

  _NfsRpc_xmp_setattr_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NfsRpc_xmp_setattr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_setattr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_setattr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_setattr_presult__isset {
  _NfsRpc_xmp_setattr_presult__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_setattr_presult__isset;

class NfsRpc_xmp_setattr_presult {
 public:


  virtual ~NfsRpc_xmp_setattr_presult() throw();
  int32_t* success;

  _NfsRpc_xmp_setattr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NfsRpc_xmp_read_args__isset {
  _NfsRpc_xmp_read_args__isset() : path(false), buf(false), size(false), offset(false), fi(false) {}
  bool path :1;
  bool buf :1;
  bool size :1;
  bool offset :1;
  bool fi :1;
} _NfsRpc_xmp_read_args__isset;

class NfsRpc_xmp_read_args {
 public:

  NfsRpc_xmp_read_args(const NfsRpc_xmp_read_args&);
  NfsRpc_xmp_read_args& operator=(const NfsRpc_xmp_read_args&);
  NfsRpc_xmp_read_args() : path(), buf(), size(0), offset(0) {
  }

  virtual ~NfsRpc_xmp_read_args() throw();
  std::string path;
  std::string buf;
  int64_t size;
  int64_t offset;
  thrift_fuse_file_info fi;

  _NfsRpc_xmp_read_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_buf(const std::string& val);

  void __set_size(const int64_t val);

  void __set_offset(const int64_t val);

  void __set_fi(const thrift_fuse_file_info& val);

  bool operator == (const NfsRpc_xmp_read_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(buf == rhs.buf))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(fi == rhs.fi))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NfsRpc_xmp_read_pargs {
 public:


  virtual ~NfsRpc_xmp_read_pargs() throw();
  const std::string* path;
  const std::string* buf;
  const int64_t* size;
  const int64_t* offset;
  const thrift_fuse_file_info* fi;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_read_result__isset {
  _NfsRpc_xmp_read_result__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_read_result__isset;

class NfsRpc_xmp_read_result {
 public:

  NfsRpc_xmp_read_result(const NfsRpc_xmp_read_result&);
  NfsRpc_xmp_read_result& operator=(const NfsRpc_xmp_read_result&);
  NfsRpc_xmp_read_result() : success(0) {
  }

  virtual ~NfsRpc_xmp_read_result() throw();
  int32_t success;

  _NfsRpc_xmp_read_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NfsRpc_xmp_read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_read_presult__isset {
  _NfsRpc_xmp_read_presult__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_read_presult__isset;

class NfsRpc_xmp_read_presult {
 public:


  virtual ~NfsRpc_xmp_read_presult() throw();
  int32_t* success;

  _NfsRpc_xmp_read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NfsRpc_xmp_write_args__isset {
  _NfsRpc_xmp_write_args__isset() : path(false), buf(false), size(false), offset(false), fi(false) {}
  bool path :1;
  bool buf :1;
  bool size :1;
  bool offset :1;
  bool fi :1;
} _NfsRpc_xmp_write_args__isset;

class NfsRpc_xmp_write_args {
 public:

  NfsRpc_xmp_write_args(const NfsRpc_xmp_write_args&);
  NfsRpc_xmp_write_args& operator=(const NfsRpc_xmp_write_args&);
  NfsRpc_xmp_write_args() : path(), buf(), size(0), offset(0) {
  }

  virtual ~NfsRpc_xmp_write_args() throw();
  std::string path;
  std::string buf;
  int64_t size;
  int64_t offset;
  thrift_fuse_file_info fi;

  _NfsRpc_xmp_write_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_buf(const std::string& val);

  void __set_size(const int64_t val);

  void __set_offset(const int64_t val);

  void __set_fi(const thrift_fuse_file_info& val);

  bool operator == (const NfsRpc_xmp_write_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(buf == rhs.buf))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(fi == rhs.fi))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NfsRpc_xmp_write_pargs {
 public:


  virtual ~NfsRpc_xmp_write_pargs() throw();
  const std::string* path;
  const std::string* buf;
  const int64_t* size;
  const int64_t* offset;
  const thrift_fuse_file_info* fi;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_write_result__isset {
  _NfsRpc_xmp_write_result__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_write_result__isset;

class NfsRpc_xmp_write_result {
 public:

  NfsRpc_xmp_write_result(const NfsRpc_xmp_write_result&);
  NfsRpc_xmp_write_result& operator=(const NfsRpc_xmp_write_result&);
  NfsRpc_xmp_write_result() : success(0) {
  }

  virtual ~NfsRpc_xmp_write_result() throw();
  int32_t success;

  _NfsRpc_xmp_write_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NfsRpc_xmp_write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_write_presult__isset {
  _NfsRpc_xmp_write_presult__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_write_presult__isset;

class NfsRpc_xmp_write_presult {
 public:


  virtual ~NfsRpc_xmp_write_presult() throw();
  int32_t* success;

  _NfsRpc_xmp_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NfsRpc_xmp_rename_args__isset {
  _NfsRpc_xmp_rename_args__isset() : fromName(false), to(false) {}
  bool fromName :1;
  bool to :1;
} _NfsRpc_xmp_rename_args__isset;

class NfsRpc_xmp_rename_args {
 public:

  NfsRpc_xmp_rename_args(const NfsRpc_xmp_rename_args&);
  NfsRpc_xmp_rename_args& operator=(const NfsRpc_xmp_rename_args&);
  NfsRpc_xmp_rename_args() : fromName(), to() {
  }

  virtual ~NfsRpc_xmp_rename_args() throw();
  std::string fromName;
  std::string to;

  _NfsRpc_xmp_rename_args__isset __isset;

  void __set_fromName(const std::string& val);

  void __set_to(const std::string& val);

  bool operator == (const NfsRpc_xmp_rename_args & rhs) const
  {
    if (!(fromName == rhs.fromName))
      return false;
    if (!(to == rhs.to))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_rename_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_rename_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NfsRpc_xmp_rename_pargs {
 public:


  virtual ~NfsRpc_xmp_rename_pargs() throw();
  const std::string* fromName;
  const std::string* to;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_rename_result__isset {
  _NfsRpc_xmp_rename_result__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_rename_result__isset;

class NfsRpc_xmp_rename_result {
 public:

  NfsRpc_xmp_rename_result(const NfsRpc_xmp_rename_result&);
  NfsRpc_xmp_rename_result& operator=(const NfsRpc_xmp_rename_result&);
  NfsRpc_xmp_rename_result() : success(0) {
  }

  virtual ~NfsRpc_xmp_rename_result() throw();
  int32_t success;

  _NfsRpc_xmp_rename_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NfsRpc_xmp_rename_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_rename_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_rename_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_rename_presult__isset {
  _NfsRpc_xmp_rename_presult__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_rename_presult__isset;

class NfsRpc_xmp_rename_presult {
 public:


  virtual ~NfsRpc_xmp_rename_presult() throw();
  int32_t* success;

  _NfsRpc_xmp_rename_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NfsRpc_xmp_mkdir_args__isset {
  _NfsRpc_xmp_mkdir_args__isset() : path(false), mode(false) {}
  bool path :1;
  bool mode :1;
} _NfsRpc_xmp_mkdir_args__isset;

class NfsRpc_xmp_mkdir_args {
 public:

  NfsRpc_xmp_mkdir_args(const NfsRpc_xmp_mkdir_args&);
  NfsRpc_xmp_mkdir_args& operator=(const NfsRpc_xmp_mkdir_args&);
  NfsRpc_xmp_mkdir_args() : path(), mode(0) {
  }

  virtual ~NfsRpc_xmp_mkdir_args() throw();
  std::string path;
  int32_t mode;

  _NfsRpc_xmp_mkdir_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_mode(const int32_t val);

  bool operator == (const NfsRpc_xmp_mkdir_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_mkdir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_mkdir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NfsRpc_xmp_mkdir_pargs {
 public:


  virtual ~NfsRpc_xmp_mkdir_pargs() throw();
  const std::string* path;
  const int32_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_mkdir_result__isset {
  _NfsRpc_xmp_mkdir_result__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_mkdir_result__isset;

class NfsRpc_xmp_mkdir_result {
 public:

  NfsRpc_xmp_mkdir_result(const NfsRpc_xmp_mkdir_result&);
  NfsRpc_xmp_mkdir_result& operator=(const NfsRpc_xmp_mkdir_result&);
  NfsRpc_xmp_mkdir_result() : success(0) {
  }

  virtual ~NfsRpc_xmp_mkdir_result() throw();
  int32_t success;

  _NfsRpc_xmp_mkdir_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NfsRpc_xmp_mkdir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_mkdir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_mkdir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_mkdir_presult__isset {
  _NfsRpc_xmp_mkdir_presult__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_mkdir_presult__isset;

class NfsRpc_xmp_mkdir_presult {
 public:


  virtual ~NfsRpc_xmp_mkdir_presult() throw();
  int32_t* success;

  _NfsRpc_xmp_mkdir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NfsRpc_xmp_rmdir_args__isset {
  _NfsRpc_xmp_rmdir_args__isset() : path(false) {}
  bool path :1;
} _NfsRpc_xmp_rmdir_args__isset;

class NfsRpc_xmp_rmdir_args {
 public:

  NfsRpc_xmp_rmdir_args(const NfsRpc_xmp_rmdir_args&);
  NfsRpc_xmp_rmdir_args& operator=(const NfsRpc_xmp_rmdir_args&);
  NfsRpc_xmp_rmdir_args() : path() {
  }

  virtual ~NfsRpc_xmp_rmdir_args() throw();
  std::string path;

  _NfsRpc_xmp_rmdir_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const NfsRpc_xmp_rmdir_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_rmdir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_rmdir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NfsRpc_xmp_rmdir_pargs {
 public:


  virtual ~NfsRpc_xmp_rmdir_pargs() throw();
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_rmdir_result__isset {
  _NfsRpc_xmp_rmdir_result__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_rmdir_result__isset;

class NfsRpc_xmp_rmdir_result {
 public:

  NfsRpc_xmp_rmdir_result(const NfsRpc_xmp_rmdir_result&);
  NfsRpc_xmp_rmdir_result& operator=(const NfsRpc_xmp_rmdir_result&);
  NfsRpc_xmp_rmdir_result() : success(0) {
  }

  virtual ~NfsRpc_xmp_rmdir_result() throw();
  int32_t success;

  _NfsRpc_xmp_rmdir_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NfsRpc_xmp_rmdir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_rmdir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_rmdir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_rmdir_presult__isset {
  _NfsRpc_xmp_rmdir_presult__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_rmdir_presult__isset;

class NfsRpc_xmp_rmdir_presult {
 public:


  virtual ~NfsRpc_xmp_rmdir_presult() throw();
  int32_t* success;

  _NfsRpc_xmp_rmdir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NfsRpc_xmp_statfs_args__isset {
  _NfsRpc_xmp_statfs_args__isset() : path(false), stbuf(false) {}
  bool path :1;
  bool stbuf :1;
} _NfsRpc_xmp_statfs_args__isset;

class NfsRpc_xmp_statfs_args {
 public:

  NfsRpc_xmp_statfs_args(const NfsRpc_xmp_statfs_args&);
  NfsRpc_xmp_statfs_args& operator=(const NfsRpc_xmp_statfs_args&);
  NfsRpc_xmp_statfs_args() : path() {
  }

  virtual ~NfsRpc_xmp_statfs_args() throw();
  std::string path;
  thrift_statvfs stbuf;

  _NfsRpc_xmp_statfs_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_stbuf(const thrift_statvfs& val);

  bool operator == (const NfsRpc_xmp_statfs_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(stbuf == rhs.stbuf))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_statfs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_statfs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NfsRpc_xmp_statfs_pargs {
 public:


  virtual ~NfsRpc_xmp_statfs_pargs() throw();
  const std::string* path;
  const thrift_statvfs* stbuf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_statfs_result__isset {
  _NfsRpc_xmp_statfs_result__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_statfs_result__isset;

class NfsRpc_xmp_statfs_result {
 public:

  NfsRpc_xmp_statfs_result(const NfsRpc_xmp_statfs_result&);
  NfsRpc_xmp_statfs_result& operator=(const NfsRpc_xmp_statfs_result&);
  NfsRpc_xmp_statfs_result() : success(0) {
  }

  virtual ~NfsRpc_xmp_statfs_result() throw();
  int32_t success;

  _NfsRpc_xmp_statfs_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NfsRpc_xmp_statfs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NfsRpc_xmp_statfs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NfsRpc_xmp_statfs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NfsRpc_xmp_statfs_presult__isset {
  _NfsRpc_xmp_statfs_presult__isset() : success(false) {}
  bool success :1;
} _NfsRpc_xmp_statfs_presult__isset;

class NfsRpc_xmp_statfs_presult {
 public:


  virtual ~NfsRpc_xmp_statfs_presult() throw();
  int32_t* success;

  _NfsRpc_xmp_statfs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class NfsRpcClient : virtual public NfsRpcIf {
 public:
    NfsRpcClient() {} //TODO: added adbhat
  NfsRpcClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NfsRpcClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t xmp_open(const std::string& path, const thrift_fuse_file_info& fi);
  void send_xmp_open(const std::string& path, const thrift_fuse_file_info& fi);
  int32_t recv_xmp_open();
  int32_t xmp_access(const std::string& path, const int32_t mask);
  void send_xmp_access(const std::string& path, const int32_t mask);
  int32_t recv_xmp_access();
  int32_t xmp_mknod(const std::string& path, const int32_t mode, const int64_t rdev);
  void send_xmp_mknod(const std::string& path, const int32_t mode, const int64_t rdev);
  int32_t recv_xmp_mknod();
  int32_t xmp_remove(const std::string& path);
  void send_xmp_remove(const std::string& path);
  int32_t recv_xmp_remove();
  int32_t xmp_getattr(const std::string& path, const thrift_stat& stbuf);
  void send_xmp_getattr(const std::string& path, const thrift_stat& stbuf);
  int32_t recv_xmp_getattr();
  int32_t xmp_setattr(const std::string& path, const thrift_stat& stbuf);
  void send_xmp_setattr(const std::string& path, const thrift_stat& stbuf);
  int32_t recv_xmp_setattr();
  int32_t xmp_read(const std::string& path, const std::string& buf, const int64_t size, const int64_t offset, const thrift_fuse_file_info& fi);
  void send_xmp_read(const std::string& path, const std::string& buf, const int64_t size, const int64_t offset, const thrift_fuse_file_info& fi);
  int32_t recv_xmp_read();
  int32_t xmp_write(const std::string& path, const std::string& buf, const int64_t size, const int64_t offset, const thrift_fuse_file_info& fi);
  void send_xmp_write(const std::string& path, const std::string& buf, const int64_t size, const int64_t offset, const thrift_fuse_file_info& fi);
  int32_t recv_xmp_write();
  int32_t xmp_rename(const std::string& fromName, const std::string& to);
  void send_xmp_rename(const std::string& fromName, const std::string& to);
  int32_t recv_xmp_rename();
  int32_t xmp_mkdir(const std::string& path, const int32_t mode);
  void send_xmp_mkdir(const std::string& path, const int32_t mode);
  int32_t recv_xmp_mkdir();
  int32_t xmp_rmdir(const std::string& path);
  void send_xmp_rmdir(const std::string& path);
  int32_t recv_xmp_rmdir();
  int32_t xmp_statfs(const std::string& path, const thrift_statvfs& stbuf);
  void send_xmp_statfs(const std::string& path, const thrift_statvfs& stbuf);
  int32_t recv_xmp_statfs();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class NfsRpcProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<NfsRpcIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (NfsRpcProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_xmp_open(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_xmp_access(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_xmp_mknod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_xmp_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_xmp_getattr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_xmp_setattr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_xmp_read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_xmp_write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_xmp_rename(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_xmp_mkdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_xmp_rmdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_xmp_statfs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  NfsRpcProcessor(boost::shared_ptr<NfsRpcIf> iface) :
    iface_(iface) {
    processMap_["xmp_open"] = &NfsRpcProcessor::process_xmp_open;
    processMap_["xmp_access"] = &NfsRpcProcessor::process_xmp_access;
    processMap_["xmp_mknod"] = &NfsRpcProcessor::process_xmp_mknod;
    processMap_["xmp_remove"] = &NfsRpcProcessor::process_xmp_remove;
    processMap_["xmp_getattr"] = &NfsRpcProcessor::process_xmp_getattr;
    processMap_["xmp_setattr"] = &NfsRpcProcessor::process_xmp_setattr;
    processMap_["xmp_read"] = &NfsRpcProcessor::process_xmp_read;
    processMap_["xmp_write"] = &NfsRpcProcessor::process_xmp_write;
    processMap_["xmp_rename"] = &NfsRpcProcessor::process_xmp_rename;
    processMap_["xmp_mkdir"] = &NfsRpcProcessor::process_xmp_mkdir;
    processMap_["xmp_rmdir"] = &NfsRpcProcessor::process_xmp_rmdir;
    processMap_["xmp_statfs"] = &NfsRpcProcessor::process_xmp_statfs;
  }

  virtual ~NfsRpcProcessor() {}
};

class NfsRpcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  NfsRpcProcessorFactory(const ::boost::shared_ptr< NfsRpcIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< NfsRpcIfFactory > handlerFactory_;
};

class NfsRpcMultiface : virtual public NfsRpcIf {
 public:
  NfsRpcMultiface(std::vector<boost::shared_ptr<NfsRpcIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NfsRpcMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NfsRpcIf> > ifaces_;
  NfsRpcMultiface() {}
  void add(boost::shared_ptr<NfsRpcIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t xmp_open(const std::string& path, const thrift_fuse_file_info& fi) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->xmp_open(path, fi);
    }
    return ifaces_[i]->xmp_open(path, fi);
  }

  int32_t xmp_access(const std::string& path, const int32_t mask) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->xmp_access(path, mask);
    }
    return ifaces_[i]->xmp_access(path, mask);
  }

  int32_t xmp_mknod(const std::string& path, const int32_t mode, const int64_t rdev) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->xmp_mknod(path, mode, rdev);
    }
    return ifaces_[i]->xmp_mknod(path, mode, rdev);
  }

  int32_t xmp_remove(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->xmp_remove(path);
    }
    return ifaces_[i]->xmp_remove(path);
  }

  int32_t xmp_getattr(const std::string& path, const thrift_stat& stbuf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->xmp_getattr(path, stbuf);
    }
    return ifaces_[i]->xmp_getattr(path, stbuf);
  }

  int32_t xmp_setattr(const std::string& path, const thrift_stat& stbuf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->xmp_setattr(path, stbuf);
    }
    return ifaces_[i]->xmp_setattr(path, stbuf);
  }

  int32_t xmp_read(const std::string& path, const std::string& buf, const int64_t size, const int64_t offset, const thrift_fuse_file_info& fi) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->xmp_read(path, buf, size, offset, fi);
    }
    return ifaces_[i]->xmp_read(path, buf, size, offset, fi);
  }

  int32_t xmp_write(const std::string& path, const std::string& buf, const int64_t size, const int64_t offset, const thrift_fuse_file_info& fi) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->xmp_write(path, buf, size, offset, fi);
    }
    return ifaces_[i]->xmp_write(path, buf, size, offset, fi);
  }

  int32_t xmp_rename(const std::string& fromName, const std::string& to) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->xmp_rename(fromName, to);
    }
    return ifaces_[i]->xmp_rename(fromName, to);
  }

  int32_t xmp_mkdir(const std::string& path, const int32_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->xmp_mkdir(path, mode);
    }
    return ifaces_[i]->xmp_mkdir(path, mode);
  }

  int32_t xmp_rmdir(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->xmp_rmdir(path);
    }
    return ifaces_[i]->xmp_rmdir(path);
  }

  int32_t xmp_statfs(const std::string& path, const thrift_statvfs& stbuf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->xmp_statfs(path, stbuf);
    }
    return ifaces_[i]->xmp_statfs(path, stbuf);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class NfsRpcConcurrentClient : virtual public NfsRpcIf {
 public:
  NfsRpcConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NfsRpcConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t xmp_open(const std::string& path, const thrift_fuse_file_info& fi);
  int32_t send_xmp_open(const std::string& path, const thrift_fuse_file_info& fi);
  int32_t recv_xmp_open(const int32_t seqid);
  int32_t xmp_access(const std::string& path, const int32_t mask);
  int32_t send_xmp_access(const std::string& path, const int32_t mask);
  int32_t recv_xmp_access(const int32_t seqid);
  int32_t xmp_mknod(const std::string& path, const int32_t mode, const int64_t rdev);
  int32_t send_xmp_mknod(const std::string& path, const int32_t mode, const int64_t rdev);
  int32_t recv_xmp_mknod(const int32_t seqid);
  int32_t xmp_remove(const std::string& path);
  int32_t send_xmp_remove(const std::string& path);
  int32_t recv_xmp_remove(const int32_t seqid);
  int32_t xmp_getattr(const std::string& path, const thrift_stat& stbuf);
  int32_t send_xmp_getattr(const std::string& path, const thrift_stat& stbuf);
  int32_t recv_xmp_getattr(const int32_t seqid);
  int32_t xmp_setattr(const std::string& path, const thrift_stat& stbuf);
  int32_t send_xmp_setattr(const std::string& path, const thrift_stat& stbuf);
  int32_t recv_xmp_setattr(const int32_t seqid);
  int32_t xmp_read(const std::string& path, const std::string& buf, const int64_t size, const int64_t offset, const thrift_fuse_file_info& fi);
  int32_t send_xmp_read(const std::string& path, const std::string& buf, const int64_t size, const int64_t offset, const thrift_fuse_file_info& fi);
  int32_t recv_xmp_read(const int32_t seqid);
  int32_t xmp_write(const std::string& path, const std::string& buf, const int64_t size, const int64_t offset, const thrift_fuse_file_info& fi);
  int32_t send_xmp_write(const std::string& path, const std::string& buf, const int64_t size, const int64_t offset, const thrift_fuse_file_info& fi);
  int32_t recv_xmp_write(const int32_t seqid);
  int32_t xmp_rename(const std::string& fromName, const std::string& to);
  int32_t send_xmp_rename(const std::string& fromName, const std::string& to);
  int32_t recv_xmp_rename(const int32_t seqid);
  int32_t xmp_mkdir(const std::string& path, const int32_t mode);
  int32_t send_xmp_mkdir(const std::string& path, const int32_t mode);
  int32_t recv_xmp_mkdir(const int32_t seqid);
  int32_t xmp_rmdir(const std::string& path);
  int32_t send_xmp_rmdir(const std::string& path);
  int32_t recv_xmp_rmdir(const int32_t seqid);
  int32_t xmp_statfs(const std::string& path, const thrift_statvfs& stbuf);
  int32_t send_xmp_statfs(const std::string& path, const thrift_statvfs& stbuf);
  int32_t recv_xmp_statfs(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
