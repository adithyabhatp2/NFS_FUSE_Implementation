/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "NfsRpc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




thrift_timespec::~thrift_timespec() throw() {
}


void thrift_timespec::__set_tv_sec(const int64_t val) {
  this->tv_sec = val;
}

void thrift_timespec::__set_tv_nsec(const int64_t val) {
  this->tv_nsec = val;
}

uint32_t thrift_timespec::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tv_sec);
          this->__isset.tv_sec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tv_nsec);
          this->__isset.tv_nsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_timespec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_timespec");

  xfer += oprot->writeFieldBegin("tv_sec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tv_sec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tv_nsec", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->tv_nsec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_timespec &a, thrift_timespec &b) {
  using ::std::swap;
  swap(a.tv_sec, b.tv_sec);
  swap(a.tv_nsec, b.tv_nsec);
  swap(a.__isset, b.__isset);
}

thrift_timespec::thrift_timespec(const thrift_timespec& other0) {
  tv_sec = other0.tv_sec;
  tv_nsec = other0.tv_nsec;
  __isset = other0.__isset;
}
thrift_timespec& thrift_timespec::operator=(const thrift_timespec& other1) {
  tv_sec = other1.tv_sec;
  tv_nsec = other1.tv_nsec;
  __isset = other1.__isset;
  return *this;
}
void thrift_timespec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_timespec(";
  out << "tv_sec=" << to_string(tv_sec);
  out << ", " << "tv_nsec=" << to_string(tv_nsec);
  out << ")";
}


thrift_fuse_file_info::~thrift_fuse_file_info() throw() {
}


void thrift_fuse_file_info::__set_flags(const int32_t val) {
  this->flags = val;
}

void thrift_fuse_file_info::__set_fh_old(const int64_t val) {
  this->fh_old = val;
}

void thrift_fuse_file_info::__set_writepage(const int32_t val) {
  this->writepage = val;
}

void thrift_fuse_file_info::__set_direct_io(const int32_t val) {
  this->direct_io = val;
}

void thrift_fuse_file_info::__set_keep_cache(const int32_t val) {
  this->keep_cache = val;
}

void thrift_fuse_file_info::__set_flush(const int32_t val) {
  this->flush = val;
}

void thrift_fuse_file_info::__set_nonseekable(const int32_t val) {
  this->nonseekable = val;
}

void thrift_fuse_file_info::__set_flock_release(const int32_t val) {
  this->flock_release = val;
}

void thrift_fuse_file_info::__set_padding(const int32_t val) {
  this->padding = val;
}

void thrift_fuse_file_info::__set_fh(const int64_t val) {
  this->fh = val;
}

void thrift_fuse_file_info::__set_lock_owner(const int64_t val) {
  this->lock_owner = val;
}

uint32_t thrift_fuse_file_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fh_old);
          this->__isset.fh_old = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->writepage);
          this->__isset.writepage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->direct_io);
          this->__isset.direct_io = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->keep_cache);
          this->__isset.keep_cache = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flush);
          this->__isset.flush = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nonseekable);
          this->__isset.nonseekable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flock_release);
          this->__isset.flock_release = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->padding);
          this->__isset.padding = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fh);
          this->__isset.fh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lock_owner);
          this->__isset.lock_owner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_fuse_file_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_fuse_file_info");

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->flags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fh_old", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->fh_old);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("writepage", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->writepage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("direct_io", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->direct_io);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keep_cache", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->keep_cache);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flush", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->flush);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nonseekable", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->nonseekable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flock_release", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->flock_release);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("padding", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->padding);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fh", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->fh);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lock_owner", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->lock_owner);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_fuse_file_info &a, thrift_fuse_file_info &b) {
  using ::std::swap;
  swap(a.flags, b.flags);
  swap(a.fh_old, b.fh_old);
  swap(a.writepage, b.writepage);
  swap(a.direct_io, b.direct_io);
  swap(a.keep_cache, b.keep_cache);
  swap(a.flush, b.flush);
  swap(a.nonseekable, b.nonseekable);
  swap(a.flock_release, b.flock_release);
  swap(a.padding, b.padding);
  swap(a.fh, b.fh);
  swap(a.lock_owner, b.lock_owner);
  swap(a.__isset, b.__isset);
}

thrift_fuse_file_info::thrift_fuse_file_info(const thrift_fuse_file_info& other2) {
  flags = other2.flags;
  fh_old = other2.fh_old;
  writepage = other2.writepage;
  direct_io = other2.direct_io;
  keep_cache = other2.keep_cache;
  flush = other2.flush;
  nonseekable = other2.nonseekable;
  flock_release = other2.flock_release;
  padding = other2.padding;
  fh = other2.fh;
  lock_owner = other2.lock_owner;
  __isset = other2.__isset;
}
thrift_fuse_file_info& thrift_fuse_file_info::operator=(const thrift_fuse_file_info& other3) {
  flags = other3.flags;
  fh_old = other3.fh_old;
  writepage = other3.writepage;
  direct_io = other3.direct_io;
  keep_cache = other3.keep_cache;
  flush = other3.flush;
  nonseekable = other3.nonseekable;
  flock_release = other3.flock_release;
  padding = other3.padding;
  fh = other3.fh;
  lock_owner = other3.lock_owner;
  __isset = other3.__isset;
  return *this;
}
void thrift_fuse_file_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_fuse_file_info(";
  out << "flags=" << to_string(flags);
  out << ", " << "fh_old=" << to_string(fh_old);
  out << ", " << "writepage=" << to_string(writepage);
  out << ", " << "direct_io=" << to_string(direct_io);
  out << ", " << "keep_cache=" << to_string(keep_cache);
  out << ", " << "flush=" << to_string(flush);
  out << ", " << "nonseekable=" << to_string(nonseekable);
  out << ", " << "flock_release=" << to_string(flock_release);
  out << ", " << "padding=" << to_string(padding);
  out << ", " << "fh=" << to_string(fh);
  out << ", " << "lock_owner=" << to_string(lock_owner);
  out << ")";
}


thrift_stat::~thrift_stat() throw() {
}


void thrift_stat::__set_st_dev(const int64_t val) {
  this->st_dev = val;
}

void thrift_stat::__set_st_ino(const int64_t val) {
  this->st_ino = val;
}

void thrift_stat::__set_st_mode(const int32_t val) {
  this->st_mode = val;
}

void thrift_stat::__set_st_nlink(const int64_t val) {
  this->st_nlink = val;
}

void thrift_stat::__set_st_uid(const int32_t val) {
  this->st_uid = val;
}

void thrift_stat::__set_st_gid(const int32_t val) {
  this->st_gid = val;
}

void thrift_stat::__set___pad0(const int32_t val) {
  this->__pad0 = val;
}

void thrift_stat::__set_st_size(const int64_t val) {
  this->st_size = val;
}

void thrift_stat::__set_st_blksize(const int64_t val) {
  this->st_blksize = val;
}

void thrift_stat::__set_st_blocks(const int64_t val) {
  this->st_blocks = val;
}

void thrift_stat::__set_st_atim(const thrift_timespec& val) {
  this->st_atim = val;
}

void thrift_stat::__set_st_mtim(const thrift_timespec& val) {
  this->st_mtim = val;
}

void thrift_stat::__set_st_ctim(const thrift_timespec& val) {
  this->st_ctim = val;
}

void thrift_stat::__set___glibc_reserved0(const int64_t val) {
  this->__glibc_reserved0 = val;
}

void thrift_stat::__set___glibc_reserved1(const int64_t val) {
  this->__glibc_reserved1 = val;
}

void thrift_stat::__set___glibc_reserved2(const int64_t val) {
  this->__glibc_reserved2 = val;
}

void thrift_stat::__set_st_rdev(const int64_t val) {
  this->st_rdev = val;
}

uint32_t thrift_stat::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_dev);
          this->__isset.st_dev = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_ino);
          this->__isset.st_ino = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->st_mode);
          this->__isset.st_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_nlink);
          this->__isset.st_nlink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->st_uid);
          this->__isset.st_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->st_gid);
          this->__isset.st_gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->__pad0);
          this->__isset.__pad0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_size);
          this->__isset.st_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_blksize);
          this->__isset.st_blksize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_blocks);
          this->__isset.st_blocks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->st_atim.read(iprot);
          this->__isset.st_atim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->st_mtim.read(iprot);
          this->__isset.st_mtim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->st_ctim.read(iprot);
          this->__isset.st_ctim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->__glibc_reserved0);
          this->__isset.__glibc_reserved0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->__glibc_reserved1);
          this->__isset.__glibc_reserved1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->__glibc_reserved2);
          this->__isset.__glibc_reserved2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_rdev);
          this->__isset.st_rdev = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_stat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_stat");

  xfer += oprot->writeFieldBegin("st_dev", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->st_dev);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_ino", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->st_ino);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_mode", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->st_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_nlink", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->st_nlink);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_uid", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->st_uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_gid", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->st_gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__pad0", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->__pad0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_size", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->st_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_blksize", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->st_blksize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_blocks", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->st_blocks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_atim", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->st_atim.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_mtim", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->st_mtim.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_ctim", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->st_ctim.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__glibc_reserved0", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->__glibc_reserved0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__glibc_reserved1", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->__glibc_reserved1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__glibc_reserved2", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->__glibc_reserved2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_rdev", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->st_rdev);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_stat &a, thrift_stat &b) {
  using ::std::swap;
  swap(a.st_dev, b.st_dev);
  swap(a.st_ino, b.st_ino);
  swap(a.st_mode, b.st_mode);
  swap(a.st_nlink, b.st_nlink);
  swap(a.st_uid, b.st_uid);
  swap(a.st_gid, b.st_gid);
  swap(a.__pad0, b.__pad0);
  swap(a.st_size, b.st_size);
  swap(a.st_blksize, b.st_blksize);
  swap(a.st_blocks, b.st_blocks);
  swap(a.st_atim, b.st_atim);
  swap(a.st_mtim, b.st_mtim);
  swap(a.st_ctim, b.st_ctim);
  swap(a.__glibc_reserved0, b.__glibc_reserved0);
  swap(a.__glibc_reserved1, b.__glibc_reserved1);
  swap(a.__glibc_reserved2, b.__glibc_reserved2);
  swap(a.st_rdev, b.st_rdev);
  swap(a.__isset, b.__isset);
}

thrift_stat::thrift_stat(const thrift_stat& other4) {
  st_dev = other4.st_dev;
  st_ino = other4.st_ino;
  st_mode = other4.st_mode;
  st_nlink = other4.st_nlink;
  st_uid = other4.st_uid;
  st_gid = other4.st_gid;
  __pad0 = other4.__pad0;
  st_size = other4.st_size;
  st_blksize = other4.st_blksize;
  st_blocks = other4.st_blocks;
  st_atim = other4.st_atim;
  st_mtim = other4.st_mtim;
  st_ctim = other4.st_ctim;
  __glibc_reserved0 = other4.__glibc_reserved0;
  __glibc_reserved1 = other4.__glibc_reserved1;
  __glibc_reserved2 = other4.__glibc_reserved2;
  st_rdev = other4.st_rdev;
  __isset = other4.__isset;
}
thrift_stat& thrift_stat::operator=(const thrift_stat& other5) {
  st_dev = other5.st_dev;
  st_ino = other5.st_ino;
  st_mode = other5.st_mode;
  st_nlink = other5.st_nlink;
  st_uid = other5.st_uid;
  st_gid = other5.st_gid;
  __pad0 = other5.__pad0;
  st_size = other5.st_size;
  st_blksize = other5.st_blksize;
  st_blocks = other5.st_blocks;
  st_atim = other5.st_atim;
  st_mtim = other5.st_mtim;
  st_ctim = other5.st_ctim;
  __glibc_reserved0 = other5.__glibc_reserved0;
  __glibc_reserved1 = other5.__glibc_reserved1;
  __glibc_reserved2 = other5.__glibc_reserved2;
  st_rdev = other5.st_rdev;
  __isset = other5.__isset;
  return *this;
}
void thrift_stat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_stat(";
  out << "st_dev=" << to_string(st_dev);
  out << ", " << "st_ino=" << to_string(st_ino);
  out << ", " << "st_mode=" << to_string(st_mode);
  out << ", " << "st_nlink=" << to_string(st_nlink);
  out << ", " << "st_uid=" << to_string(st_uid);
  out << ", " << "st_gid=" << to_string(st_gid);
  out << ", " << "__pad0=" << to_string(__pad0);
  out << ", " << "st_size=" << to_string(st_size);
  out << ", " << "st_blksize=" << to_string(st_blksize);
  out << ", " << "st_blocks=" << to_string(st_blocks);
  out << ", " << "st_atim=" << to_string(st_atim);
  out << ", " << "st_mtim=" << to_string(st_mtim);
  out << ", " << "st_ctim=" << to_string(st_ctim);
  out << ", " << "__glibc_reserved0=" << to_string(__glibc_reserved0);
  out << ", " << "__glibc_reserved1=" << to_string(__glibc_reserved1);
  out << ", " << "__glibc_reserved2=" << to_string(__glibc_reserved2);
  out << ", " << "st_rdev=" << to_string(st_rdev);
  out << ")";
}


thrift_statvfs::~thrift_statvfs() throw() {
}


void thrift_statvfs::__set_f_bsize(const int64_t val) {
  this->f_bsize = val;
}

void thrift_statvfs::__set_f_frsize(const int64_t val) {
  this->f_frsize = val;
}

void thrift_statvfs::__set_f_blocks(const int64_t val) {
  this->f_blocks = val;
}

void thrift_statvfs::__set_f_bfree(const int64_t val) {
  this->f_bfree = val;
}

void thrift_statvfs::__set_f_bavail(const int64_t val) {
  this->f_bavail = val;
}

void thrift_statvfs::__set_f_files(const int64_t val) {
  this->f_files = val;
}

void thrift_statvfs::__set_f_ffree(const int64_t val) {
  this->f_ffree = val;
}

void thrift_statvfs::__set_f_favail(const int64_t val) {
  this->f_favail = val;
}

void thrift_statvfs::__set_f_fsid(const int64_t val) {
  this->f_fsid = val;
}

void thrift_statvfs::__set_f_flag(const int64_t val) {
  this->f_flag = val;
}

void thrift_statvfs::__set_f_namemax(const int64_t val) {
  this->f_namemax = val;
}

void thrift_statvfs::__set___f_spare0(const int32_t val) {
  this->__f_spare0 = val;
}

void thrift_statvfs::__set___f_spare1(const int32_t val) {
  this->__f_spare1 = val;
}

void thrift_statvfs::__set___f_spare2(const int32_t val) {
  this->__f_spare2 = val;
}

void thrift_statvfs::__set___f_spare3(const int32_t val) {
  this->__f_spare3 = val;
}

void thrift_statvfs::__set___f_spare4(const int32_t val) {
  this->__f_spare4 = val;
}

void thrift_statvfs::__set___f_spare5(const int32_t val) {
  this->__f_spare5 = val;
}

uint32_t thrift_statvfs::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->f_bsize);
          this->__isset.f_bsize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->f_frsize);
          this->__isset.f_frsize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->f_blocks);
          this->__isset.f_blocks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->f_bfree);
          this->__isset.f_bfree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->f_bavail);
          this->__isset.f_bavail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->f_files);
          this->__isset.f_files = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->f_ffree);
          this->__isset.f_ffree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->f_favail);
          this->__isset.f_favail = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->f_fsid);
          this->__isset.f_fsid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->f_flag);
          this->__isset.f_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->f_namemax);
          this->__isset.f_namemax = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->__f_spare0);
          this->__isset.__f_spare0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->__f_spare1);
          this->__isset.__f_spare1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->__f_spare2);
          this->__isset.__f_spare2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->__f_spare3);
          this->__isset.__f_spare3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->__f_spare4);
          this->__isset.__f_spare4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->__f_spare5);
          this->__isset.__f_spare5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_statvfs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_statvfs");

  xfer += oprot->writeFieldBegin("f_bsize", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->f_bsize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("f_frsize", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->f_frsize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("f_blocks", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->f_blocks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("f_bfree", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->f_bfree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("f_bavail", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->f_bavail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("f_files", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->f_files);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("f_ffree", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->f_ffree);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("f_favail", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->f_favail);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("f_fsid", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->f_fsid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("f_flag", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->f_flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("f_namemax", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->f_namemax);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__f_spare0", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->__f_spare0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__f_spare1", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->__f_spare1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__f_spare2", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->__f_spare2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__f_spare3", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->__f_spare3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__f_spare4", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->__f_spare4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__f_spare5", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->__f_spare5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_statvfs &a, thrift_statvfs &b) {
  using ::std::swap;
  swap(a.f_bsize, b.f_bsize);
  swap(a.f_frsize, b.f_frsize);
  swap(a.f_blocks, b.f_blocks);
  swap(a.f_bfree, b.f_bfree);
  swap(a.f_bavail, b.f_bavail);
  swap(a.f_files, b.f_files);
  swap(a.f_ffree, b.f_ffree);
  swap(a.f_favail, b.f_favail);
  swap(a.f_fsid, b.f_fsid);
  swap(a.f_flag, b.f_flag);
  swap(a.f_namemax, b.f_namemax);
  swap(a.__f_spare0, b.__f_spare0);
  swap(a.__f_spare1, b.__f_spare1);
  swap(a.__f_spare2, b.__f_spare2);
  swap(a.__f_spare3, b.__f_spare3);
  swap(a.__f_spare4, b.__f_spare4);
  swap(a.__f_spare5, b.__f_spare5);
  swap(a.__isset, b.__isset);
}

thrift_statvfs::thrift_statvfs(const thrift_statvfs& other6) {
  f_bsize = other6.f_bsize;
  f_frsize = other6.f_frsize;
  f_blocks = other6.f_blocks;
  f_bfree = other6.f_bfree;
  f_bavail = other6.f_bavail;
  f_files = other6.f_files;
  f_ffree = other6.f_ffree;
  f_favail = other6.f_favail;
  f_fsid = other6.f_fsid;
  f_flag = other6.f_flag;
  f_namemax = other6.f_namemax;
  __f_spare0 = other6.__f_spare0;
  __f_spare1 = other6.__f_spare1;
  __f_spare2 = other6.__f_spare2;
  __f_spare3 = other6.__f_spare3;
  __f_spare4 = other6.__f_spare4;
  __f_spare5 = other6.__f_spare5;
  __isset = other6.__isset;
}
thrift_statvfs& thrift_statvfs::operator=(const thrift_statvfs& other7) {
  f_bsize = other7.f_bsize;
  f_frsize = other7.f_frsize;
  f_blocks = other7.f_blocks;
  f_bfree = other7.f_bfree;
  f_bavail = other7.f_bavail;
  f_files = other7.f_files;
  f_ffree = other7.f_ffree;
  f_favail = other7.f_favail;
  f_fsid = other7.f_fsid;
  f_flag = other7.f_flag;
  f_namemax = other7.f_namemax;
  __f_spare0 = other7.__f_spare0;
  __f_spare1 = other7.__f_spare1;
  __f_spare2 = other7.__f_spare2;
  __f_spare3 = other7.__f_spare3;
  __f_spare4 = other7.__f_spare4;
  __f_spare5 = other7.__f_spare5;
  __isset = other7.__isset;
  return *this;
}
void thrift_statvfs::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_statvfs(";
  out << "f_bsize=" << to_string(f_bsize);
  out << ", " << "f_frsize=" << to_string(f_frsize);
  out << ", " << "f_blocks=" << to_string(f_blocks);
  out << ", " << "f_bfree=" << to_string(f_bfree);
  out << ", " << "f_bavail=" << to_string(f_bavail);
  out << ", " << "f_files=" << to_string(f_files);
  out << ", " << "f_ffree=" << to_string(f_ffree);
  out << ", " << "f_favail=" << to_string(f_favail);
  out << ", " << "f_fsid=" << to_string(f_fsid);
  out << ", " << "f_flag=" << to_string(f_flag);
  out << ", " << "f_namemax=" << to_string(f_namemax);
  out << ", " << "__f_spare0=" << to_string(__f_spare0);
  out << ", " << "__f_spare1=" << to_string(__f_spare1);
  out << ", " << "__f_spare2=" << to_string(__f_spare2);
  out << ", " << "__f_spare3=" << to_string(__f_spare3);
  out << ", " << "__f_spare4=" << to_string(__f_spare4);
  out << ", " << "__f_spare5=" << to_string(__f_spare5);
  out << ")";
}


thrift_getattr_reply::~thrift_getattr_reply() throw() {
}


void thrift_getattr_reply::__set_retVal(const int32_t val) {
  this->retVal = val;
}

void thrift_getattr_reply::__set_tstbuf(const thrift_stat& val) {
  this->tstbuf = val;
}

uint32_t thrift_getattr_reply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retVal);
          this->__isset.retVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tstbuf.read(iprot);
          this->__isset.tstbuf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_getattr_reply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_getattr_reply");

  xfer += oprot->writeFieldBegin("retVal", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->retVal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tstbuf", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tstbuf.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_getattr_reply &a, thrift_getattr_reply &b) {
  using ::std::swap;
  swap(a.retVal, b.retVal);
  swap(a.tstbuf, b.tstbuf);
  swap(a.__isset, b.__isset);
}

thrift_getattr_reply::thrift_getattr_reply(const thrift_getattr_reply& other8) {
  retVal = other8.retVal;
  tstbuf = other8.tstbuf;
  __isset = other8.__isset;
}
thrift_getattr_reply& thrift_getattr_reply::operator=(const thrift_getattr_reply& other9) {
  retVal = other9.retVal;
  tstbuf = other9.tstbuf;
  __isset = other9.__isset;
  return *this;
}
void thrift_getattr_reply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_getattr_reply(";
  out << "retVal=" << to_string(retVal);
  out << ", " << "tstbuf=" << to_string(tstbuf);
  out << ")";
}


thrift_read_reply::~thrift_read_reply() throw() {
}


void thrift_read_reply::__set_retVal(const int32_t val) {
  this->retVal = val;
}

void thrift_read_reply::__set_tbuf(const std::string& val) {
  this->tbuf = val;
}

uint32_t thrift_read_reply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retVal);
          this->__isset.retVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tbuf);
          this->__isset.tbuf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_read_reply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_read_reply");

  xfer += oprot->writeFieldBegin("retVal", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->retVal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tbuf", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tbuf);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_read_reply &a, thrift_read_reply &b) {
  using ::std::swap;
  swap(a.retVal, b.retVal);
  swap(a.tbuf, b.tbuf);
  swap(a.__isset, b.__isset);
}

thrift_read_reply::thrift_read_reply(const thrift_read_reply& other10) {
  retVal = other10.retVal;
  tbuf = other10.tbuf;
  __isset = other10.__isset;
}
thrift_read_reply& thrift_read_reply::operator=(const thrift_read_reply& other11) {
  retVal = other11.retVal;
  tbuf = other11.tbuf;
  __isset = other11.__isset;
  return *this;
}
void thrift_read_reply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_read_reply(";
  out << "retVal=" << to_string(retVal);
  out << ", " << "tbuf=" << to_string(tbuf);
  out << ")";
}


thrift_statfs_reply::~thrift_statfs_reply() throw() {
}


void thrift_statfs_reply::__set_retVal(const int32_t val) {
  this->retVal = val;
}

void thrift_statfs_reply::__set_tstbuf(const thrift_statvfs& val) {
  this->tstbuf = val;
}

uint32_t thrift_statfs_reply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retVal);
          this->__isset.retVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tstbuf.read(iprot);
          this->__isset.tstbuf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_statfs_reply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_statfs_reply");

  xfer += oprot->writeFieldBegin("retVal", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->retVal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tstbuf", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tstbuf.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_statfs_reply &a, thrift_statfs_reply &b) {
  using ::std::swap;
  swap(a.retVal, b.retVal);
  swap(a.tstbuf, b.tstbuf);
  swap(a.__isset, b.__isset);
}

thrift_statfs_reply::thrift_statfs_reply(const thrift_statfs_reply& other12) {
  retVal = other12.retVal;
  tstbuf = other12.tstbuf;
  __isset = other12.__isset;
}
thrift_statfs_reply& thrift_statfs_reply::operator=(const thrift_statfs_reply& other13) {
  retVal = other13.retVal;
  tstbuf = other13.tstbuf;
  __isset = other13.__isset;
  return *this;
}
void thrift_statfs_reply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_statfs_reply(";
  out << "retVal=" << to_string(retVal);
  out << ", " << "tstbuf=" << to_string(tstbuf);
  out << ")";
}


thrift_open_reply::~thrift_open_reply() throw() {
}


void thrift_open_reply::__set_retVal(const int32_t val) {
  this->retVal = val;
}

void thrift_open_reply::__set_tfi(const thrift_fuse_file_info& val) {
  this->tfi = val;
}

uint32_t thrift_open_reply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retVal);
          this->__isset.retVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tfi.read(iprot);
          this->__isset.tfi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_open_reply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_open_reply");

  xfer += oprot->writeFieldBegin("retVal", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->retVal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tfi", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tfi.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_open_reply &a, thrift_open_reply &b) {
  using ::std::swap;
  swap(a.retVal, b.retVal);
  swap(a.tfi, b.tfi);
  swap(a.__isset, b.__isset);
}

thrift_open_reply::thrift_open_reply(const thrift_open_reply& other14) {
  retVal = other14.retVal;
  tfi = other14.tfi;
  __isset = other14.__isset;
}
thrift_open_reply& thrift_open_reply::operator=(const thrift_open_reply& other15) {
  retVal = other15.retVal;
  tfi = other15.tfi;
  __isset = other15.__isset;
  return *this;
}
void thrift_open_reply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_open_reply(";
  out << "retVal=" << to_string(retVal);
  out << ", " << "tfi=" << to_string(tfi);
  out << ")";
}


thrift_readlink_reply::~thrift_readlink_reply() throw() {
}


void thrift_readlink_reply::__set_retVal(const int32_t val) {
  this->retVal = val;
}

void thrift_readlink_reply::__set_tbuf(const std::string& val) {
  this->tbuf = val;
}

uint32_t thrift_readlink_reply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retVal);
          this->__isset.retVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tbuf);
          this->__isset.tbuf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_readlink_reply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_readlink_reply");

  xfer += oprot->writeFieldBegin("retVal", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->retVal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tbuf", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tbuf);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_readlink_reply &a, thrift_readlink_reply &b) {
  using ::std::swap;
  swap(a.retVal, b.retVal);
  swap(a.tbuf, b.tbuf);
  swap(a.__isset, b.__isset);
}

thrift_readlink_reply::thrift_readlink_reply(const thrift_readlink_reply& other16) {
  retVal = other16.retVal;
  tbuf = other16.tbuf;
  __isset = other16.__isset;
}
thrift_readlink_reply& thrift_readlink_reply::operator=(const thrift_readlink_reply& other17) {
  retVal = other17.retVal;
  tbuf = other17.tbuf;
  __isset = other17.__isset;
  return *this;
}
void thrift_readlink_reply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_readlink_reply(";
  out << "retVal=" << to_string(retVal);
  out << ", " << "tbuf=" << to_string(tbuf);
  out << ")";
}


thrift_fsync_reply::~thrift_fsync_reply() throw() {
}


void thrift_fsync_reply::__set_retVal(const int32_t val) {
  this->retVal = val;
}

void thrift_fsync_reply::__set_isdatasync(const int32_t val) {
  this->isdatasync = val;
}

void thrift_fsync_reply::__set_tfi(const thrift_fuse_file_info& val) {
  this->tfi = val;
}

uint32_t thrift_fsync_reply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retVal);
          this->__isset.retVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->isdatasync);
          this->__isset.isdatasync = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tfi.read(iprot);
          this->__isset.tfi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_fsync_reply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_fsync_reply");

  xfer += oprot->writeFieldBegin("retVal", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->retVal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isdatasync", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->isdatasync);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tfi", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->tfi.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_fsync_reply &a, thrift_fsync_reply &b) {
  using ::std::swap;
  swap(a.retVal, b.retVal);
  swap(a.isdatasync, b.isdatasync);
  swap(a.tfi, b.tfi);
  swap(a.__isset, b.__isset);
}

thrift_fsync_reply::thrift_fsync_reply(const thrift_fsync_reply& other18) {
  retVal = other18.retVal;
  isdatasync = other18.isdatasync;
  tfi = other18.tfi;
  __isset = other18.__isset;
}
thrift_fsync_reply& thrift_fsync_reply::operator=(const thrift_fsync_reply& other19) {
  retVal = other19.retVal;
  isdatasync = other19.isdatasync;
  tfi = other19.tfi;
  __isset = other19.__isset;
  return *this;
}
void thrift_fsync_reply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_fsync_reply(";
  out << "retVal=" << to_string(retVal);
  out << ", " << "isdatasync=" << to_string(isdatasync);
  out << ", " << "tfi=" << to_string(tfi);
  out << ")";
}


thrift_dir_entry::~thrift_dir_entry() throw() {
}


void thrift_dir_entry::__set_d_ino(const int64_t val) {
  this->d_ino = val;
}

void thrift_dir_entry::__set_d_type(const int64_t val) {
  this->d_type = val;
}

void thrift_dir_entry::__set_d_name(const std::string& val) {
  this->d_name = val;
}

uint32_t thrift_dir_entry::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->d_ino);
          this->__isset.d_ino = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->d_type);
          this->__isset.d_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->d_name);
          this->__isset.d_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_dir_entry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_dir_entry");

  xfer += oprot->writeFieldBegin("d_ino", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->d_ino);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d_type", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->d_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->d_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_dir_entry &a, thrift_dir_entry &b) {
  using ::std::swap;
  swap(a.d_ino, b.d_ino);
  swap(a.d_type, b.d_type);
  swap(a.d_name, b.d_name);
  swap(a.__isset, b.__isset);
}

thrift_dir_entry::thrift_dir_entry(const thrift_dir_entry& other20) {
  d_ino = other20.d_ino;
  d_type = other20.d_type;
  d_name = other20.d_name;
  __isset = other20.__isset;
}
thrift_dir_entry& thrift_dir_entry::operator=(const thrift_dir_entry& other21) {
  d_ino = other21.d_ino;
  d_type = other21.d_type;
  d_name = other21.d_name;
  __isset = other21.__isset;
  return *this;
}
void thrift_dir_entry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_dir_entry(";
  out << "d_ino=" << to_string(d_ino);
  out << ", " << "d_type=" << to_string(d_type);
  out << ", " << "d_name=" << to_string(d_name);
  out << ")";
}


thrift_readdir_reply::~thrift_readdir_reply() throw() {
}


void thrift_readdir_reply::__set_retVal(const int32_t val) {
  this->retVal = val;
}

void thrift_readdir_reply::__set_dir_entries(const std::vector<thrift_dir_entry> & val) {
  this->dir_entries = val;
}

uint32_t thrift_readdir_reply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->retVal);
          this->__isset.retVal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->dir_entries.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->dir_entries.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->dir_entries[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.dir_entries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_readdir_reply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_readdir_reply");

  xfer += oprot->writeFieldBegin("retVal", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->retVal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir_entries", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->dir_entries.size()));
    std::vector<thrift_dir_entry> ::const_iterator _iter27;
    for (_iter27 = this->dir_entries.begin(); _iter27 != this->dir_entries.end(); ++_iter27)
    {
      xfer += (*_iter27).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_readdir_reply &a, thrift_readdir_reply &b) {
  using ::std::swap;
  swap(a.retVal, b.retVal);
  swap(a.dir_entries, b.dir_entries);
  swap(a.__isset, b.__isset);
}

thrift_readdir_reply::thrift_readdir_reply(const thrift_readdir_reply& other28) {
  retVal = other28.retVal;
  dir_entries = other28.dir_entries;
  __isset = other28.__isset;
}
thrift_readdir_reply& thrift_readdir_reply::operator=(const thrift_readdir_reply& other29) {
  retVal = other29.retVal;
  dir_entries = other29.dir_entries;
  __isset = other29.__isset;
  return *this;
}
void thrift_readdir_reply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_readdir_reply(";
  out << "retVal=" << to_string(retVal);
  out << ", " << "dir_entries=" << to_string(dir_entries);
  out << ")";
}


