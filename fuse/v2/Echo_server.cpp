// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.


#include <iostream>
#include "gen-cpp/Echo.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace std;
using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using namespace apache::thrift::server;

#define DEBUGLEVEL 1

using boost::shared_ptr;

class EchoHandler : virtual public EchoIf {

public:
    EchoHandler() {
        // Your initialization goes here
    }

    void echo(std::string &_return, const std::string &msg) {
        // Your implementation goes here

        _return = msg;

        if (DEBUGLEVEL) {
            cout << "Echo Recvd : " << msg << endl;
        }
    }

    void send(const std::string &msg) {
        // Your implementation goes here
        if (DEBUGLEVEL) {
            cout << "Send Recvd : " << msg << endl;
        }
    }

    void oneway_send(const std::string& msg) {
        // Your implementation goes here
        printf("oneway_send\n");
	cout << "Oneway send recvd : "<< msg << endl;
    }
};


void printServerUsage(void) {
    printf("usage: server -p <port> \n");
    exit(1);
}

int main(int argc, char **argv) {

    if (argc < 3) {
        printf("Insufficient parameters!\n");
        printServerUsage();
    }

    // Process CL Args
    unsigned long int serverPort = UINT_MAX;
    int ch;
    while ((ch = getopt(argc, argv, "s:p:n:l:")) != -1) {
        switch (ch) {
            case 'p':
                serverPort = strtoul(optarg, NULL, 10);
                if (serverPort <= 1024 || serverPort > 65536) {
                    printf("Invalid Port\n");
                    printServerUsage();
                }
                break;
            case '?':
            default:
                printServerUsage();
                return 0;
        }
    }

    // Start server
    shared_ptr<EchoHandler> handler(new EchoHandler());
    shared_ptr<TProcessor> processor(new EchoProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket((int) serverPort));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    cout << "going to start server" << endl;

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}
